#!/bin/bash
# shellcheck disable=SC2086

# if hooks are disabled then exit with success
if [[ $HOOKS_ENABLED -eq $FALSE ]]; then
    echo "Hooks are disabled"
    exit 0
fi

# set colors variables
if tput colors >/dev/null 2>&1; then
    COLOR_RESET="\e[0m"
    COLOR_SUCCESS="\e[32m"
    COLOR_WARNING="\e[33m"
    COLOR_ERROR="\e[31m"
fi

# Output message are every time sent to stderr
# to avoid mess up the stdout

# success message
success() {
    echo -e "${COLOR_SUCCESS}[SUCCESS]${COLOR_RESET} $*" >&2
    return $SUCCESS
}

# failure message
failure() {
    echo -e "${COLOR_ERROR}[FAILURE]${COLOR_RESET} $*" >&2
    return $FAILURE
}

# info message
info() {
    echo -e "${COLOR_SUCCESS}[INFO]${COLOR_RESET} $*" >&2
    return $SUCCESS
}

# warning message
warning() {
    echo -e "${COLOR_WARNING}[WARNING]${COLOR_RESET} $*" >&2
    return $SUCCESS
}

# error message
error() {
    echo -e "${COLOR_ERROR}[ERROR]${COLOR_RESET} $*" >&2
    return $FAILURE
}

# fatal with error message
fatal() {
    error "$*"
    exit $FAILURE
}

# git_uncache is a function to uncache a file from the index
git_uncache() {
    # check if required arguments are provided
    if [[ -z $1 ]]; then
        return $FAILURE
    fi

    local _file="$1"

    # remove the file from the index
    if ! git rm --quiet --cached "$_file"; then
        error "Failed to uncache $_file"
        return $FAILURE
    fi

    # emit a warning that the file is uncached
    warning "Removed cached file: $_file.\n" \
        "Please consider to add it to .gitignore"

    return $SUCCESS
}

# interactive_remove is a function to take an action on a file
interactive_remove() {
    # check if required arguments are provided
    if [[ $# -ne 2 ]]; then
        return $FAILURE
    fi

    local _type="$1"
    local _file="$2"

    # ask the user what to do
    warning "$_type file detected in commit"                    \
        "\n-> $_file"                                           \
        "\n\n   What do you want to do with it?"                \
        "\n\n   c) Continue to commit without change (default)" \
        "\n   r) Remove the file from the commit"               \
        "\n   a) Abort to fix it manually"                      \
        "\n\n:: Proceed? [c/r/a] "
    
    local _answer
    read -r _answer

    # check the answer
    case $_answer in
        [aA])
            fatal "Aborted by user"
            ;;
        [rR])
            git_uncache "$_file" || return $FAILURE
            ;;
        [cC] | *)
            ;;
    esac

    return $SUCCESS
}
