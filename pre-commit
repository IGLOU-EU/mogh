#!/bin/bash

# This script is used by the pre-commit hook to check the commited
# files and auto or manual fixit it if needed.

# source config and common file
if [[ ${BASH_SOURCE[0]} -ef "$0" ]]; then
    # source config and common file
    source "./components/config"
    source "./components/common"
else
    # source from unit test
    source "${0%/*}/components/config"
    source "${0%/*}/components/common"
fi

## EXEC_BIN is an array of executable binary format
EXEC_BIN=(
    "COFF"
    "ECOFF"
    "XCOFF"
    "XCOFF32"
    "XCOFF64"
    "ELF"
    "Mach-O"
    "PEF"
    "CMD"
    "MS-DOS"
    "PE"
    "PE32+"
)

## check_dnct is a function to check if a DNCT tag is spoted in the commit
check_dnct() {
    # check if this flag is enabled
    if [[ $DNCT_SUPPORT -eq $FALSE ]]; then
        return $SUCCESS
    fi

    # run the git diff
    local _spoted
    if ! _spoted="$(git diff --cached --name-only --diff-filter=AM -p -G "$DNCT_REGEX")"; then
        error "Unexpected error from git diff check your repository"
        return $FAILURE
    fi

    # check if the commit message has the DNCT tag
    if [[ -n $_spoted ]]; then
        error "DNCT tag are spoted in commit, see files below to fix it:"

        for _file in $_spoted; do
            warning "-> $_file"
        done

        return $FAILURE
    fi

    return $SUCCESS
}

## check_dsstore is a function to check if a DSStore file is spoted in commit
check_dsstore() {
    # check if this flag is enabled
    if [[ $FILE_UNCACHE_DSSTORE -eq $FALSE ]]; then
        return $SUCCESS
    fi

    # check if required arguments are provided
    if [[ -z $1 ]]; then
        return $FAILURE
    fi

    local _file="$1"

    # check if the file is a DSStore file
    if grep -i "\.ds_store$" <<<"$_file" >/dev/null; then
        git_uncache "$_file" || return $FAILURE
    fi

    return $SUCCESS
}

## check_binary is a function to check if a binary file is spoted in commit
check_binary() {
    # check if this flag is enabled
    if [[ $FILE_UNCACHE_BINARY -eq $FALSE ]]; then
        return $SUCCESS
    fi

    # check if required arguments are provided
    if [[ -z $1 ]]; then
        return $FAILURE
    fi

    local _file="$1"

    # check if the file is a binary file
    local _type
    if ! _type="$(file -Nb "$_file" | grep -f <(printf "%s\n" "${EXEC_BIN[*]}"))"; then
        return $SUCCESS
    fi

    case $FILE_UNCACHE_BINARY in
    "$TRUE")
        git_uncache "$_file"
        ;;
    "$SUPERPOSITION")
        interactive_uncache "Executable binary" "$_file"
        ;;
    *)
        return $SUCCESS
        ;;
    esac

    return $FAILURE
}

## check_size is a function to check if file size is greater than the limit
check_size() {
    # check if this flag is disabled
    if [[ $FILE_MAX_SIZE -lt 1 ]]; then
        return $SUCCESS
    fi

    # check if required arguments are provided
    if [[ -z $1 ]]; then
        return $FAILURE
    fi

    local _file="$1"

    # take the file size
    local _size
    if ! _size=$(stat -c%s "$_file" 2>/dev/null); then
        return $FAILURE
    fi
    _size=$((_size / 1024))

    # check the file size
    if [[ $_size -lt $FILE_MAX_SIZE ]]; then
        return $SUCCESS
    fi

    case $FILE_UNCACHE_OVERSIZE in
    "$TRUE")
        git_uncache "$_file" && return $SUCCESS
        ;;
    "$SUPERPOSITION")
        interactive_uncache \
            "${_size}KB exceeds limit of ${FILE_MAX_SIZE}KB for a" "$_file" &&
            return $SUCCESS
        ;;
    *)
        return $SUCCESS
        ;;
    esac

    return $FAILURE
}

## MAIN
# do not execute if this script is sourced required for unit testing
if [[ ${BASH_SOURCE[0]} -ef "$0" ]]; then
    # check if a .gitignore exists
    if [[ $GITIGNORE_REQUIRED -eq $TRUE ]] && [[ ! -f .gitignore ]]; then
        fatal 'To prevent unwanted files from being commited, a .gitignore' \
            'file is required.\n> For disabling this check in the current' \
            'repository, you can run the following command:\n>' \
            'git config mogh.gitignore 0'
    fi

    # check if a modified or added file is tagged with DNCT
    if ! check_dnct; then
        exit $FAILURE
    fi

    for _file in $(git diff --cached --name-only --diff-filter=ATM -p); do
        # check .ds_store file
        if ! check_dsstore "$_file"; then
            continue
        fi

        # check binary file
        if ! check_binary "$_file"; then
            continue
        fi

        # check file size
        if ! check_size "$_file"; then
            continue
        fi
    done

    exit $SUCCESS
fi
