#!/bin/bash
# shellcheck disable=SC2034,SC2155

# define the relative root path
readonly ROOT_PATH="$(dirname "$(readlink -f "$0")")"

# source the helpers script
source "$ROOT_PATH/helpers"

# source the file we want to test
source "$ROOT_PATH/../pre-push"

# test-secure_branch test secure_branch function
test-secure_branch_push() {
    # set variables
    local _name
    local _branch
    local _regex
    local _enabled
    local _expected

    local _error=$FALSE
    local _result_status

    # set the test cases
    cases='[
        {
            "name": "disabled",
            "branch": "master",
            "regex": "",
            "enabled": 0,
            "expected": 0
        },
        {
            "name": "no branch",
            "branch": "",
            "regex": "master",
            "enabled": 1,
            "expected": 0
        },
        {
            "name": "no regex to match",
            "branch": "master",
            "regex": "",
            "enabled": 1,
            "expected": 0
        },
        {
            "name": "protected branch",
            "branch": "master",
            "regex": "master",
            "enabled": 1,
            "expected": 1
        },
        {
            "name": "protected branch with multiple choices",
            "branch": "develop",
            "regex": "master|develop|release",
            "enabled": 1,
            "expected": 1
        },
        {
            "name": "protected branch with regex",
            "branch": "release/1.0",
            "regex": "^release/[0-9]+\\.[0-9]+$",
            "enabled": 1,
            "expected": 1
        },
        {
            "name": "allowed branch",
            "branch": "fix/14-blablabla-mr-freeman",
            "regex": "main|master",
            "enabled": 1,
            "expected": 0
        }
    ]'

    for c in $(range_cases "$cases"); do
        # given case data
        _name="$(get_data "$c" name)"
        _branch="$(get_data "$c" branch)"
        _regex="$(get_data "$c" regex)"
        _enabled="$(get_data "$c" enabled)"
        _expected="$(get_data "$c" expected)"

        # write name to log file
        init_case "$_name"

        # set BRANCH_PROTECTED
        BRANCH_PROTECTED_PUSH=$_enabled
        BRANCH_PROTECTED_NAME=$_regex

        # when test it
        _result_status=$FAILURE
        _result=$(secure_branch_push "$_branch" 2>>"$LOG_FILE") && _result_status=$SUCCESS

        # then process the result
        then_case "$_name" "_" "_" "$_result_status" "$_expected" || _error=$((_error + 1))
    done

    # return the number of errors
    return $_error
}

# errors counter
ERRORS=0

# need to test
test-secure_branch_push || ERRORS=$((ERRORS + $?))

# print the number of errors
if [[ $ERRORS -eq 0 ]]; then
    info "all tests are passed successfully"
else
    error "number of failled tests: $ERRORS"
fi

# exit with error code if there are errors
exit $ERRORS
